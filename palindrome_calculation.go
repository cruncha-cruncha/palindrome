package main

import (
	"regexp"
	"strings"
)

const (
	P_UNKNOWN = 0
	P_TRUE    = 1
	P_FALSE   = 2
)

func PStatusToBoolPointer(status int) *bool {
	var out *bool

	if status == P_UNKNOWN {
		out = nil
	} else if status == P_TRUE {
		t := true
		out = &t
	} else {
		f := false
		out = &f
	}

	return out
}

func StringIsPalindrome(s string) int {
	if len(s) == 0 {
		return P_UNKNOWN
	}

	// normalize string
	s = strings.ToLower(s)
	reg, _ := regexp.Compile(`[^\w\n]+`)
	s = reg.ReplaceAllString(s, "")

	length := len(s)

	// this was entirely generated by CoPilot
	for i := 0; i < length/2; i++ {
		if s[i] != s[length-i-1] {
			return P_FALSE
		}
	}

	return P_TRUE
}

// pretend this function takes a long time to run
func (p *Palindromes) doWork (msg Message) {
	isPalindrome := StringIsPalindrome(msg.text)

	// SleepDelay(1)
	// check work.cancel periodically

	newStatus := PalindromeWorkStatus{
		isPalindrome: isPalindrome,
		done:         true,
	}

	// update work
	p.lock.Lock()
	if work, ok := p.work[msg.hash]; ok {
		work.status = newStatus
		p.work[msg.hash] = work
		for _, listener := range work.messages {
			select {
			case listener <- newStatus:
			default:
			}
		}
	}
	p.lock.Unlock()
}


