package main

import (
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"
)

const (
	P_UNKNOWN = 0
	P_TRUE    = 1
	P_FALSE   = 2
)

func PalindromeStatusToBoolPointer(status int) *bool {
	var out *bool

	if status == P_UNKNOWN {
		out = nil
	} else if status == P_TRUE {
		t := true
		out = &t
	} else {
		f := false
		out = &f
	}

	return out
}

// pretend this function takes a long time to run
func StringIsPalindrome(s string) int {
	SleepDelay()

	if len(s) == 0 {
		return P_UNKNOWN
	}

	s = strings.ToLower(s)
	reg, _ := regexp.Compile(`[^\w\n]+`)
	s = reg.ReplaceAllString(s, "")

	length := len(s)

	// this was entirely generated by CoPilot
	for i := 0; i < length/2; i++ {
		if s[i] != s[length-i-1] {
			return P_FALSE
		}
	}

	return P_TRUE
}

func SleepDelay() {
	delay_str := os.Getenv("P_DELAY")
	delay, err := strconv.Atoi(delay_str)
	if err != nil || delay <= 0 {
		return
	}

	time.Sleep(time.Duration(delay) * time.Second)
}
